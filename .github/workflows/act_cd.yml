name: Continuous Deployment ACT

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Set image tag
        id: set-tag
        run: |
          echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build & push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/dispelk9/analytical_tools_backend:${{ steps.set-tag.outputs.tag }}
            ghcr.io/dispelk9/analytical_tools_backend:latest

      - name: Build & push apache (frontend)
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/dispelk9/analytical_tools_frontend:${{ steps.set-tag.outputs.tag }}
            ghcr.io/dispelk9/analytical_tools_frontend:latest

  deploy:
    name: Deploy on Hetzner
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Pin server host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.IP }} >> ~/.ssh/known_hosts

      - name: SSH & deploy
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.IP }} bash << 'EOF'
            set -euo pipefail

            # Navigate to project directory
            cd /${{ secrets.SERVER_USER }}/Analytical_tools
   
            
            # Setup SSH agent and clone repository
            eval "$(ssh-agent -s)"
            echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add /${{ secrets.SERVER_USER }}/.ssh/id_rsa
            # clone once; afterwards just update in-place
            if [ ! -d ~/Analytical_tools/.git ]; then
              git clone git@github.com:Dispelk9/Analytical_tools.git ~/Analytical_tools
            fi
            git fetch --all
            git reset --hard origin/master

            echo "${{ secrets.G_TOKEN }}" \
             | docker login ghcr.io \
               --username dispelk9 \
               --password-stdin

            # Pull images you just pushed
            TAG=${{ needs.build-and-push.outputs.tag }}

            # Tear down containers + old images in one shot
            docker compose down --remove-orphans --rmi all

            printf '%s\n' \
            "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
            "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            "DB_HOST=${{ secrets.DB_HOST }}" \
            "DB_PORT=${{ secrets.DB_PORT }}" \
            "DB_NAME=${{ secrets.DB_NAME }}" \
            "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
            "SENDER=${{ secrets.SENDER }}" \
            "MAIL_PW=${{ secrets.MAIL_PW }}" \
            "SMTP_RELAY=${{ secrets.SMTP_RELAY }}" \
            > backend/.env

            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export TAG=latest
            chmod 600 backend/.env
            # Recreate all services
            TAG=$TAG docker compose up -d --remove-orphans --pull=always --force-recreate

          EOF

        
